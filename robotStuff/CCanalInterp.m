% ************** MATLAB "M" script (jim Patton) *************
% analyze the fit of the copycat approach to Sys ID
% SYNTAX:    
% INPUTS:    
% OUTPUTS:  
% VERSIONS:  11/2/99  pulled from pilot12 to main mfiles Dirsect.
%                     Changed from make_filed to makeField.m
%~~~~~~~~~~~~~~~~~~~~~~ Begin Program: ~~~~~~~~~~~~~~~~~~~~~~~~

% __ SETUP __
global DEBUGIT M L R g EPpas Kpas Bpas field_gain field_type
global RCB rc
scriptName='CCanalInterp.m';
fprintf('\n\n\n~ %s SCRIPT ~\n',scriptName)             % title message
if ~exist('plotit'), plotit=1; end                      % if not passed
playwav('menu.wav');                                    % reminder sound
startSubj=menu('Choose start Subject#:','30','31','32' ... %
  ,'33','34','35','36')+29                                   %
endSubj=menu('Choose end   Subject#:','30','31','32'   ... %
  ,'33','34','35','36')+29
Dirs=[330 210 30 270  150 90] 

% ====== BIG LOOP FOR SUBJECTS =======
for subject=startSubj:endSubj,                          % subj loop
  eval(['cd pilot' num2str(subject)]); 
  cd; 

  eval(['diary ' scriptName '.log']);                   % keep record of this
  fprintf('\n\n\n~ BEGIN analysis for %s at %s ~\n' ... %
    ,cd,whenis(clock))                                  %   
  set_params                                            % setup most values 
  !erase ccFit.ps 
  resultsFileName=[deblank(wd) scriptName '.txd'];
  
  % __ put header on output file __                             
  textappend('COPYCAT ANALYSIS',resultsFileName);       % create a line of text
  textappend(['Patton, ' whenis(clock)],resultsFileName);%
  textappend(['Generated by "' scriptName '"']      ... %
    ,resultsFileName);      % 
  textappend('Data begins below:',resultsFileName);%
  textappend('________',resultsFileName);%
  Str=sprintf(['NumCCB\tCCr\tCCaveErr\tCCfracErr'   ...
              '\tvCCr\tvCCaveErr\tvCCfracErr']);
  textappend(Str,resultsFileName);  
  
  if ~exist('trajectories.ps'),plot_trials4([],0); end  % PLOT part 1 trials
  baseList=baseline(Dirs,trialsStruct,trialData)        % ensemble avg trials
  
  % ___ determine trials for analysis ___  
  NperturbTrials=length(trialsStruct(2).trials);
  %trialsStruct(2).trials=trialsStruct(2).trials(1:12);    % for debug
  fprintf('\n%d perturbation trials :',NperturbTrials); 
  fprintf(' %d',trialsStruct(2).trials);
  fittingTrials=[];validationTrials=[];
  for i=1:NperturbTrials,
    Dir=trialData(trialsStruct(2).trials(i),7);
    if Dir==30|Dir==150|Dir==270,
      fittingTrials=[fittingTrials trialsStruct(2).trials(i)];
    else
      validationTrials=[validationTrials trialsStruct(2).trials(i)];
    end
  end
  
  % ___ FIT COPYCAT ___
  fprintf('\n\n\n ___ Begin Fitting CCBs: ___: '); 
  for i=1:2
    if i==2, % SWAP
      junk=validationTrials;
      validationTrials=fittingTrials;
      fittingTrials=junk;
    end
    fprintf('\n\n\n\n~~~ Analysis Loop #%d: ~~~',i);      %
    fprintf('\n  %d Fitting trials    :',             ... %
     length(fittingTrials)); 
    fprintf(' %d',fittingTrials);
    fprintf('\n  %d Validation trials :',             ... %
     length(validationTrials)); 
    fprintf(' %d',validationTrials);
    
    fprintf('\n\n  Fitting: ');
    CCB=setupCopycat3([],M,L,R,Kact,Bact,0,0          ... % initialize copycat bases
                      ,CCwings,spreadScale)               %
    [CCB,CCr,CCaveErr,CCfracErr]=                     ... % fit copycat model 
      ccFit8(CCB,maxTime,fittingTrials,fitIt,CCwings);            
    
    fprintf('\n\n  Validation: '); 
    [CCB,vCCr,vCCaveErr,vCCfracErr]=                  ... % check copycat model
      ccFit8(CCB,maxTime,validationTrials,~fitIt);
    
    Str=sprintf(                                      ... %
     '%d\t%0.5g\t%0.5g\t%0.5g\t%0.5g\t%0.5g\t%0.5g',  ... %
     length(CCB),CCr,CCaveErr,CCfracErr,              ... % 
     vCCr,vCCaveErr,vCCfracErr);
    textappend(Str,resultsFileName);
    
  end                                                     % END for i
  
  fprintf('\n END CopyCat processing. \n '); 
  
  % __ FINAL ___
  diary off                                               % 
  playwav('done.wav');                                    % play sound       
  




















  cd .. 
end                                                     % END for subject

assembleCCfitResults

return 

% __ RC FIELD DESIGN __
fprintf('\n ___ REGIONAL CONTROL BASES (RCB): ___: '); 
widths=[]; centers=[];                                  % init
if 1,
  for i=1:nDirs
    widths(i)=1.3*Mag;
    centers(i,:)=startPt+0.3*Mag*[cos(Dirs(i)/180*pi)...
                                sin(Dirs(i)/180*pi)];
  end
  widths(i+1)=1.8*Mag; centers(i+1,:)=startPt;
  setupRCB(widths,centers);                             %
else
  setupRCB(1.9*Mag,startPt)
end
[RCB,rcr]=rcFit8(CCB,maxTime,startPt,Dirs,Mag,deflection);
field_gain=zeros(2,2); 
for i=1:length(RCB), 
  field_gain=field_gain+RCB(i).rc*RCB(i).B; 
end; 
field_type='viscous'; 
figure(2); clf; field_plot(8); axis equal
title('field at centerpoint')

saveRCB
save RCB RCB

% __ FINAL ___
fprintf('\n ~ END makeField.m at %s ~ \n',whenis(clock))%  
diary off                                               % 
playwav('done.wav');                                    % play sound      
return
